Index: GunWarAPI/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/A1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GunWarAPI/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/A1.java b/GunWarAPI/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/A1.java
new file mode 100644
--- /dev/null	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
+++ b/GunWarAPI/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/A1.java	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
@@ -0,0 +1,12 @@
+package xyz.n7mn.dev.gunwar.entity.selector;
+
+import org.bukkit.Location;
+import org.bukkit.entity.Player;
+
+abstract class A1 {
+
+    static A1 a1;
+
+    abstract TargetSelector.Builder builder(TargetSelector.Type t, Player ps, Location source);
+
+}
Index: GunWarAPI/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/TargetSelector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GunWarAPI/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/TargetSelector.java b/GunWarAPI/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/TargetSelector.java
new file mode 100644
--- /dev/null	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
+++ b/GunWarAPI/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/TargetSelector.java	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
@@ -0,0 +1,67 @@
+package xyz.n7mn.dev.gunwar.entity.selector;
+
+import org.bukkit.GameMode;
+import org.bukkit.Location;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Player;
+
+import java.util.Collection;
+
+public interface TargetSelector {
+
+    public enum Type {
+
+        ALL_ENTITY(0, "e"),
+        ALL_PLAYER(1, "a"),
+        NEAREST_PLAYER(2, "p"),
+        ACTIVE_ENTITY(3, "s");
+
+        private int value;
+        private CharSequence character;
+
+        private Type(int value, CharSequence character) {
+            this.value = value;
+            this.character = character;
+        }
+
+        public int getValue() {
+            return value;
+        }
+
+        public CharSequence getCharacter() {
+            return character;
+        }
+    }
+
+    public interface Builder {
+        public TargetSelector.Builder withType(EntityType type);
+
+        public TargetSelector.Builder withName(String name);
+
+        public TargetSelector.Builder withMode(GameMode mode);
+
+        public TargetSelector.Builder with(String key, Object value);
+
+        public TargetSelector.Builder fromString(String selector);
+
+        public TargetSelector build();
+    }
+
+    public static TargetSelector.Builder builder(Type selectorType, Player sender, Location source) {
+        return A1.a1.builder(selectorType, sender, source);
+    }
+
+    public Type getSelectorType();
+
+    public EntityType getType();
+
+    public String getName();
+
+    public GameMode getMode();
+
+    public String toString();
+
+    public Collection<? extends Entity> getTargets();
+
+}
Index: GunWarPlugin/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GunWarPlugin/pom.xml b/GunWarPlugin/pom.xml
--- a/GunWarPlugin/pom.xml	(revision 0aafa04bc793571c8432bc09cf5dfcbed2f48854)
+++ b/GunWarPlugin/pom.xml	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
@@ -11,7 +11,7 @@
         <groupId>xyz.n7mn.dev</groupId>
     </parent>
     <artifactId>gunwar</artifactId>
-    <version>3.4.0</version>
+    <version>4.1.80.1</version>
     <packaging>jar</packaging>
 
     <name>GunWar</name>
Index: GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/NanamiGunWar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/NanamiGunWar.java b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/NanamiGunWar.java
--- a/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/NanamiGunWar.java	(revision 0aafa04bc793571c8432bc09cf5dfcbed2f48854)
+++ b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/NanamiGunWar.java	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
@@ -13,6 +13,7 @@
 import xyz.n7mn.dev.gunwar.commands.AboutGunWarCommand;
 import xyz.n7mn.dev.gunwar.commands.GunWarItemCommand;
 import xyz.n7mn.dev.gunwar.commands.GunWarReloadCommand;
+import xyz.n7mn.dev.gunwar.entity.selector.CraftTargetSelectorInitializer;
 import xyz.n7mn.dev.gunwar.game.GunWarGame;
 import xyz.n7mn.dev.gunwar.game.data.GunWarPermanentlyPlayerData;
 import xyz.n7mn.dev.gunwar.game.data.GunWarPlayerData;
@@ -60,6 +61,7 @@
                 config.getConfig().getString("mysql.username", ""),
                 config.getConfig().getString("mysql.password", "")).build();
         GwGameModes.registerDefault();
+        CraftTargetSelectorInitializer.init();
         game = new GunWarGame(plugin);
         GunWar.game = game;
         GwItems.a();
Index: GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/A2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/A2.java b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/A2.java
new file mode 100644
--- /dev/null	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
+++ b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/A2.java	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
@@ -0,0 +1,17 @@
+package xyz.n7mn.dev.gunwar.entity.selector;
+
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.v1_12_R1.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+
+final class A2 extends A1 {
+
+    A2() {
+        a1 = this;
+    }
+
+    CraftTargetSelector.Builder builder(TargetSelector.Type t, Player ps, Location source) {
+        return CraftTargetSelector.builder(t, (CraftPlayer) ps, source);
+    }
+
+}
Index: GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/CraftTargetSelector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/CraftTargetSelector.java b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/CraftTargetSelector.java
new file mode 100644
--- /dev/null	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
+++ b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/CraftTargetSelector.java	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
@@ -0,0 +1,247 @@
+package xyz.n7mn.dev.gunwar.entity.selector;
+
+import org.bukkit.Bukkit;
+import org.bukkit.GameMode;
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.v1_12_R1.CraftWorld;
+import org.bukkit.craftbukkit.v1_12_R1.entity.CraftEntity;
+import org.bukkit.craftbukkit.v1_12_R1.entity.CraftPlayer;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Player;
+
+import java.util.*;
+
+public final class CraftTargetSelector implements TargetSelector {
+
+    public static final class Builder implements TargetSelector.Builder {
+
+        private Location source;
+        private Type selectorType;
+        private EntityType type;
+        private String name;
+        private GameMode mode;
+        private CraftPlayer sender;
+
+        Builder(Type selectorType, CraftPlayer playerSender, Location source) {
+            this.source = source;
+            this.selectorType = selectorType;
+            this.sender = playerSender;
+            type = null;
+            name = null;
+            mode = null;
+        }
+
+        @Override
+        public TargetSelector.Builder withType(EntityType type) {
+            this.type = type;
+            return this;
+        }
+
+        @Override
+        public TargetSelector.Builder withName(String name) {
+            this.name = name;
+            return this;
+        }
+
+        @Override
+        public TargetSelector.Builder withMode(GameMode mode) {
+            this.mode = mode;
+            return this;
+        }
+
+        @Override
+        public TargetSelector.Builder with(String key, Object value) {
+            if(value != null) {
+                if (key.equalsIgnoreCase("type") && value instanceof EntityType) {
+                    this.type = (EntityType) value;
+                } else if (key.equalsIgnoreCase("name") && value instanceof String) {
+                    this.name = (String) value;
+                } else if (key.equalsIgnoreCase("m") && value instanceof GameMode) {
+                    this.mode = (GameMode) value;
+                }
+            }
+            return this;
+        }
+
+        @Override
+        public TargetSelector.Builder fromString(String selector) {
+            if(selector.length() >= 2 && selector.startsWith("@")) {
+                this.type = null;
+                this.name = null;
+                this.mode = null;
+                Type t = Type.ALL_ENTITY;
+                switch (selector.charAt(1)) {
+                    case 'e':
+                        t = Type.ALL_ENTITY;
+                        break;
+                    case 'a':
+                        t = Type.ALL_PLAYER;
+                        break;
+                    case 'p':
+                        t = Type.NEAREST_PLAYER;
+                        break;
+                    case 's':
+                        t = Type.ACTIVE_ENTITY;
+                        break;
+                }
+                this.selectorType = t;
+                if(selector.length() >= 4 && selector.charAt(2) == '[') {
+                    String option = selector.substring(3, selector.length() - 1);
+                    String[] l = option.split(",");
+                    for(String o : l) {
+                        String[] s = o.split("=");
+                        String key = s[0];
+                        String value = s[1];
+                        Object object = null;
+                        if(key.equalsIgnoreCase("type")) {
+                            String str = value;
+                            if(value.startsWith("minecraft:")) {
+                                str = value.substring(10);
+                            }
+                            object = EntityType.fromName(str);
+                        }
+                        if(key.equalsIgnoreCase("name")) {
+                            object = value;
+                        }
+                        if(key.equalsIgnoreCase("m")) {
+                            try {
+                                object = GameMode.getByValue(Integer.parseInt(value));
+                            } catch (NumberFormatException ignored) { }
+                        }
+                        with(key, object);
+                    }
+                }
+            }
+            return this;
+        }
+        @Override
+        public TargetSelector build() {
+            return new CraftTargetSelector(selectorType, sender, source, type, name, mode);
+        }
+
+    }
+
+    static CraftTargetSelector.Builder builder(Type selectorType, CraftPlayer playerSender, Location source) {
+        return new CraftTargetSelector.Builder(selectorType, playerSender, source);
+    }
+
+    private final Type selectorType;
+    private final EntityType type;
+    private final String name;
+    private final GameMode mode;
+    private final List<CraftEntity> targets;
+
+    private CraftTargetSelector(Type selectorType, CraftPlayer playerSender, Location source, EntityType type, String name, GameMode mode) {
+        this.selectorType = selectorType;
+        this.type = type;
+        this.name = name;
+        this.mode = mode;
+        this.targets = new ArrayList<>();
+        List<World> worlds = Bukkit.getWorlds();
+        if(source != null) {
+            worlds.clear();
+            worlds.add(source.getWorld());
+            for(World w : Bukkit.getWorlds()) if(w != source.getWorld()) worlds.add(w);
+        }
+        double distance = -1;
+        CraftEntity nearestEntity = null;
+        for(World world : worlds) {
+            Collection<Entity> entities = world.getEntities();
+            if(source != null && world == source.getWorld()) {
+                entities = source.getNearbyEntities(2500, 2500, 2500);
+            }
+            for(Entity entity : entities) {
+                CraftEntity craftEntity = (CraftEntity) entity;
+                if(!(
+                        (type != null && craftEntity.getType() != type) ||
+                                (name != null && craftEntity.getCustomName().equalsIgnoreCase(name)) ||
+                                (mode != null && craftEntity instanceof CraftPlayer && ((CraftPlayer)craftEntity).getGameMode() != mode)
+                )) {
+                    if(this.selectorType == Type.ALL_ENTITY) {
+                        this.targets.add(craftEntity);
+                    } else if(this.selectorType == Type.ALL_PLAYER) {
+                        if(craftEntity instanceof CraftPlayer) {
+                            this.targets.add(craftEntity);
+                        }
+                    } else if(this.selectorType == Type.NEAREST_PLAYER) {
+                        if(craftEntity instanceof CraftPlayer && source != null) {
+                            double d = Math.abs(Math.sqrt(Math.pow(source.getX() - craftEntity.getLocation().getX(), 2) +
+                                    Math.pow(source.getY() - craftEntity.getLocation().getY(), 2) +
+                                    Math.pow(source.getZ() - craftEntity.getLocation().getZ(), 2)));
+                            if(distance == -1 || distance > d) {
+                                distance = d;
+                                nearestEntity = craftEntity;
+                            }
+                        }
+                    } else if(this.selectorType == Type.ACTIVE_ENTITY) {
+                        if(playerSender != null) this.targets.add(playerSender);
+                    }
+                }
+            }
+        }
+        if(nearestEntity != null) {
+            this.targets.add(nearestEntity);
+        }
+    }
+
+    @Override
+    public Type getSelectorType() {
+        return selectorType;
+    }
+
+    @Override
+    public EntityType getType() {
+        return type;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public GameMode getMode() {
+        return mode;
+    }
+
+    @Override
+    public String toString() {
+        String type = (getType() == null ? "" : nonnull(getType().getName()));
+        String name = nonnull(getName());
+        int m_ = -1;
+        if(getMode() != null) m_ = getMode().getValue();
+        String m = "";
+        if(m_ != -1) m = String.valueOf(m_);
+        Map<String, String> options = new HashMap<>();
+        List<String> a_ = new ArrayList<>();
+        options.put("type", type);
+        options.put("name", name);
+        options.put("m", m);
+        for(Map.Entry<String, String> entry : options.entrySet()) {
+            if(!entry.getValue().isEmpty()) {
+                String s_ = entry.getKey() + "=" + entry.getValue();
+                a_.add(s_);
+            }
+        }
+        String option = String.join(",", a_);
+        String result = "@" + selectorType.getCharacter().toString();
+        if(option.length() > 0) {
+            result += "[" + option + "]";
+        }
+        return result;
+    }
+
+
+    private String nonnull(String nullableString) {
+        return nullableString == null ? "" : "minecraft:" + nullableString;
+    }
+
+    @Override
+    public Collection<CraftEntity> getTargets() {
+        return targets;
+    }
+
+}
Index: GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/CraftTargetSelectorInitializer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/CraftTargetSelectorInitializer.java b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/CraftTargetSelectorInitializer.java
new file mode 100644
--- /dev/null	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
+++ b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/entity/selector/CraftTargetSelectorInitializer.java	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
@@ -0,0 +1,9 @@
+package xyz.n7mn.dev.gunwar.entity.selector;
+
+public final class CraftTargetSelectorInitializer {
+
+    public static void init() {
+        new A2();
+    }
+
+}
Index: GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/GunWarGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/GunWarGame.java b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/GunWarGame.java
--- a/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/GunWarGame.java	(revision 0aafa04bc793571c8432bc09cf5dfcbed2f48854)
+++ b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/GunWarGame.java	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
@@ -105,8 +105,11 @@
     public ItemData getItemData(ItemStack item) {
         if(item != null && item.hasItemMeta()) {
             ItemMeta meta = item.getItemMeta();
-            List<ItemData> dataList = itemDataList;
-            for (ItemData data : dataList) if(meta.getLore().contains(ChatColor.DARK_GRAY + data.getGwItem().getId())) return data;
+            if(meta.getLore() != null) {
+                List<ItemData> dataList = itemDataList;
+                for (ItemData data : dataList)
+                    if (meta.getLore().contains(ChatColor.DARK_GRAY + data.getGwItem().getId())) return data;
+            }
         }
         return null;
     }
Index: GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/data/GunWarGunData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/data/GunWarGunData.java b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/data/GunWarGunData.java
--- a/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/data/GunWarGunData.java	(revision 0aafa04bc793571c8432bc09cf5dfcbed2f48854)
+++ b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/data/GunWarGunData.java	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
@@ -2,6 +2,9 @@
 
 import org.bukkit.ChatColor;
 import org.bukkit.Particle;
+import org.bukkit.Server;
+import org.bukkit.craftbukkit.v1_12_R1.CraftServer;
+import org.bukkit.entity.ArmorStand;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
@@ -64,31 +67,36 @@
                 accuracy = ((GwGunItem) getGwItem()).getAccuracyOnSneak();
             }
 
-            double yaw = random.nextDouble() * (60 / accuracy) - (30 / accuracy);
-            double pitch = random.nextDouble() * (60 / accuracy) - (30 / accuracy);
+            double yaw = random.nextDouble() * (16 / accuracy) - (8 / accuracy);
+            double pitch = random.nextDouble() * (16 / accuracy) - (8 / accuracy);
 
             HitEntity hitEntity = GunWar.getGame().getPlayerData(getOwner()).drawParticleLine(
-                    Particle.SMOKE_NORMAL, 0, 0, 0.25, ((GwGunItem) getGwItem()).getRange(),
+                    Particle.CRIT, 0, 0, 0.1, ((GwGunItem) getGwItem()).getRange(),
                     new Angle(yaw, pitch), 0.25, (GwGunItem) getGwItem());
             if(hitEntity != null) {
-                if (hitEntity.getEntity() instanceof Player) {
-                    PlayerData data = GunWar.getGame().getPlayerData((Player) hitEntity.getEntity());
-                    hitEntity.getEntity().damage(0, getOwner());
-                    data.setHealth(Math.max(0, data.getHealth() - hitEntity.getDamage()));
-                } else {
-                    double damage = hitEntity.getDamage() * 0.25;
-                    hitEntity.getEntity().damage(damage, getOwner());
-                }
-
                 double subX = hitEntity.getHitLocation().getX() - hitEntity.getFrom().getX();
                 double subY = hitEntity.getHitLocation().getY() - hitEntity.getFrom().getY();
                 double subZ = hitEntity.getHitLocation().getZ() - hitEntity.getFrom().getZ();
                 double far = Math.sqrt(Math.pow(subX, 2) +
                         Math.pow(subY, 2) +
                         Math.pow(subZ, 2));
-                double d = ((GwGunItem) getGwItem()).getKnockBack() / far;
-                Vector vector = new Vector(subX * d, subY * d, subZ * d);
-                hitEntity.getEntity().setVelocity(vector);
+                if(hitEntity.getEntity() != null) {
+                    if (hitEntity.getEntity() instanceof Player) {
+                        PlayerData data = GunWar.getGame().getPlayerData((Player) hitEntity.getEntity());
+                        hitEntity.getEntity().damage(0, getOwner());
+                        data.setHealth(Math.max(0, data.getHealth() - hitEntity.getDamage()));
+                    } else if (!(hitEntity.getEntity() instanceof ArmorStand)) {
+                        double damage = hitEntity.getDamage();
+                        hitEntity.getEntity().damage(damage, getOwner());
+                    }
+                    double d = ((GwGunItem) getGwItem()).getKnockBack() / far;
+                    Vector vector = new Vector(subX * d, subY * d, subZ * d);
+                    hitEntity.getEntity().setVelocity(vector);
+                }
+                double recoil = (getOwner().isSneaking() ? ((GwGunItem) getGwItem()).getRecoilOnSneak() : ((GwGunItem) getGwItem()).getRecoil());
+                double d_ = recoil / far;
+                Vector vector_ = new Vector(subX * d_ * -1, subY * d_ * -1, subZ * d_ * -1);
+                getOwner().setVelocity(vector_);
             }
 
             ((GwGunItem) getGwItem()).onShoot(getOwner());
@@ -143,7 +151,7 @@
                 continue;
             }
             if(i.hasItemMeta()) {
-                if(i.getItemMeta().getLore().contains(getGwItem().getId())); {
+                if(i.getItemMeta().getLore() != null && i.getItemMeta().getLore().contains(getGwItem().getId())); {
                     getOwner().getInventory().setItem(items.indexOf(i), getItem());
                 }
             }
@@ -155,6 +163,7 @@
     public void cancelReload() {
         if(reload != null && !reload.isCancelled()) {
             reload.cancel();
+            reloading = false;
             canFire = true;
             updateName();
         }
Index: GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/data/GunWarPlayerData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/data/GunWarPlayerData.java b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/data/GunWarPlayerData.java
--- a/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/data/GunWarPlayerData.java	(revision 0aafa04bc793571c8432bc09cf5dfcbed2f48854)
+++ b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/game/data/GunWarPlayerData.java	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
@@ -223,11 +223,11 @@
             double yi = xa.getY() * xb + ya.getY() * yb + nv.getY() * zb;
             double zi = xa.getZ() * xb + ya.getZ() * yb + nv.getZ() * zb;
 
-            double x = xi + nx;
-            double y = yi + ny;
-            double z = zi + nz;
+            double px = xi + nx;
+            double py = yi + ny;
+            double pz = zi + nz;
 
-            p.spawnParticle(particle, new Location(c.getWorld(), x, y, z), 1, 0, 0, 0, 0);
+            p.spawnParticle(particle, new Location(c.getWorld(), px, py, pz), 1, 0, 0, 0, 0);
         }
     }
 
@@ -346,65 +346,105 @@
             double x = startX;
             double y = startY;
             double z = startZ;
-            double damageMin = gun.getAttackDamage() / 1.3;
-            double hsdamageMin = gun.getHeadShotDamage() / 1.3;
+            double damageMin = gun.getAttackDamage() / 1.1;
+            double hsdamageMin = gun.getHeadShotDamage() / 1.1;
             double currentDamage = gun.getAttackDamage();
             double currentHSDamage = gun.getHeadShotDamage();
             double separateDamage = currentDamage - damageMin / times;
             double separateHSDamage = currentHSDamage - hsdamageMin / times;
+            double px = 0;
+            double py = 0;
+            double pz = 0;
             while (z < times) {
-                c(particle, x, y, z);
-                for(Entity entity : getPlayer().getNearbyEntities(gun.getRange() + 1, gun.getRange() + 1, gun.getRange() + 1)) {
-                    if(entity instanceof LivingEntity) {
-                        LivingEntity livingEntity = (LivingEntity) entity;
-                        if(livingEntity != getPlayer()) {
-                            double xmin = entity.getLocation().getX() - (entity.getWidth() / 2);
-                            double xmax = entity.getLocation().getX() + (entity.getWidth() / 2);
-                            double ymin = entity.getLocation().getY();
-                            double ymax = entity.getLocation().getY() + entity.getHeight();
-                            double zmin = entity.getLocation().getZ() - (entity.getWidth() / 2);
-                            double zmax = entity.getLocation().getZ() + (entity.getWidth() / 2);
-                            boolean condition1 = xmin <= x && xmax >= x;
-                            boolean condition2 = ymin <= y && ymax >= y;
-                            boolean condition3 = zmin <= z && zmax >= z;
-                            if (condition1 && condition2 && condition3) {
-                                double hxmin = livingEntity.getEyeLocation().getX() - (livingEntity.getEyeHeight() / 2);
-                                double hxmax = livingEntity.getEyeLocation().getX() + (livingEntity.getEyeHeight() / 2);
-                                double hymin = livingEntity.getEyeLocation().getY() - (livingEntity.getEyeHeight() / 2);
-                                double hymax = livingEntity.getEyeLocation().getY() + (livingEntity.getEyeHeight() / 2);
-                                double hzmin = livingEntity.getEyeLocation().getZ() - (livingEntity.getEyeHeight() / 2);
-                                double hzmax = livingEntity.getEyeLocation().getZ() + (livingEntity.getEyeHeight() / 2);
-                                boolean hcondition1 = hxmin <= x && hxmax >= x;
-                                boolean hcondition2 = hymin <= y && hymax >= y;
-                                boolean hcondition3 = hzmin <= z && hzmax >= z;
-                                boolean headShot = hcondition1 && hcondition2 && hcondition3;
-                                if(GunWar.getGame().getGameMode() == GwGameModes.NORMAL && ((GameModeNormal) GwGameModes.NORMAL).getMode() == GameModeNormal.Mode.TEAM) {
-                                    if (livingEntity instanceof Player) {
-                                        PlayerData data = GunWar.getGame().getPlayerData((Player) livingEntity);
-                                        if (data != null && data.getTeam() != getTeam()) {
-                                            return new HitEntity(livingEntity, headShot, headShot ? currentHSDamage : currentDamage,
-                                                    getPlayer().getEyeLocation(), new Location(livingEntity.getWorld(), x, y, z));
+                double twopi = 2 * Math.PI;
+                double t = 1 * twopi;
+                double division = twopi / 100;
+                double radius = 2;
+
+                Location c = player.getEyeLocation();
+                Vector nv = c.getDirection().normalize();
+
+                double nx = radius * nv.getX() + c.getX();
+                double ny = radius * nv.getY() + c.getY();
+                double nz = radius * nv.getZ() + c.getZ();
+
+                Vector ya = a(nv, new Vector(0, 1, 0)).normalize();
+                Vector xa = ya.getCrossProduct(nv).normalize();
+
+                for (double theta = 0; theta < t; theta += division) {
+                    double xi = xa.getX() * x + ya.getX() * y + nv.getX() * z;
+                    double yi = xa.getY() * x + ya.getY() * y + nv.getY() * z;
+                    double zi = xa.getZ() * x + ya.getZ() * y + nv.getZ() * z;
+
+                    px = xi + nx;
+                    py = yi + ny;
+                    pz = zi + nz;
+
+                    player.spawnParticle(particle, new Location(c.getWorld(), px, py, pz), 1, 0, 0, 0, 0);
+
+                    for(Entity entity : getPlayer().getNearbyEntities(gun.getRange() + 1, gun.getRange() + 1, gun.getRange() + 1)) {
+                        if(entity instanceof LivingEntity) {
+                            LivingEntity livingEntity = (LivingEntity) entity;
+                            if(livingEntity != getPlayer()) {
+                                double xmin = livingEntity.getLocation().getX() - (livingEntity.getWidth() / 2);
+                                double xmax = livingEntity.getLocation().getX() + (livingEntity.getWidth() / 2);
+                                double ymin = livingEntity.getLocation().getY();
+                                double ymax = livingEntity.getLocation().getY() + livingEntity.getHeight();
+                                double zmin = livingEntity.getLocation().getZ() - (livingEntity.getWidth() / 2);
+                                double zmax = livingEntity.getLocation().getZ() + (livingEntity.getWidth() / 2);
+                                boolean condition1 = xmin <= px && xmax >= px;
+                                boolean condition2 = ymin <= py && ymax >= py;
+                                boolean condition3 = zmin <= pz && zmax >= pz;
+                                if (condition1 && condition2 && condition3) {
+                                    double hxmin = livingEntity.getEyeLocation().getX() - (livingEntity.getEyeHeight() / 2);
+                                    double hxmax = livingEntity.getEyeLocation().getX() + (livingEntity.getEyeHeight() / 2);
+                                    double hymin = livingEntity.getEyeLocation().getY() - (livingEntity.getEyeHeight() / 2);
+                                    double hymax = livingEntity.getEyeLocation().getY() + (livingEntity.getEyeHeight() / 2);
+                                    double hzmin = livingEntity.getEyeLocation().getZ() - (livingEntity.getEyeHeight() / 2);
+                                    double hzmax = livingEntity.getEyeLocation().getZ() + (livingEntity.getEyeHeight() / 2);
+                                    boolean hcondition1 = hxmin <= px && hxmax >= px;
+                                    boolean hcondition2 = hymin <= py && hymax >= py;
+                                    boolean hcondition3 = hzmin <= pz && hzmax >= pz;
+                                    boolean headShot = hcondition1 && hcondition2 && hcondition3;
+                                    boolean passed = true;
+                                    if(livingEntity instanceof Player) {
+                                        if ((GunWar.getGame().getGameMode() == GwGameModes.NORMAL && ((GameModeNormal) GwGameModes.NORMAL).getMode() == GameModeNormal.Mode.TEAM) ||
+                                                GunWar.getGame().getGameMode() == GwGameModes.CASTLE_SIEGE || GunWar.getGame().getGameMode() == GwGameModes.ZOMBIE_ESCAPE) {
+                                            PlayerData data = GunWar.getGame().getPlayerData((Player) livingEntity);
+                                            if(data != null) passed = data.getTeam() == getTeam();
                                         }
                                     }
+                                    if(passed) return new HitEntity(livingEntity, headShot, headShot ? currentHSDamage : currentDamage,
+                                            getPlayer().getEyeLocation(), new Location(livingEntity.getWorld(), px, py, pz));
                                 }
-                                return new HitEntity(livingEntity, headShot, headShot ? currentHSDamage : currentDamage,
-                                        getPlayer().getEyeLocation(), new Location(livingEntity.getWorld(), x, y, z));
                             }
                         }
                     }
-                }
-                Location loc = new Location(getPlayer().getWorld(), x, y, z);
-                Block block = loc.getBlock();
-                if(block != null && block.getType() != Material.AIR && block.getType() != Material.STRUCTURE_VOID) {
-                    @SuppressWarnings("deprecation")
-                    PacketPlayOutWorldEvent packet = new PacketPlayOutWorldEvent(2001,
-                            new BlockPosition(block.getLocation().getBlockX(), block.getLocation().getBlockY(), block.getLocation().getBlockZ()),
-                            block.getType().getId(), false);
-                    List<Player> players = getPlayer().getWorld().getPlayers();
-                    for(final Player p : players) {
-                        ((CraftPlayer) p).getHandle().playerConnection.sendPacket(packet);
+                    Location loc = new Location(getPlayer().getWorld(), px, py, pz);
+
+                    Block block = loc.getBlock();
+                    if(block != null) {
+                        if (block.getType() != Material.AIR && block.getType() != Material.LONG_GRASS && block.getType() != Material.DOUBLE_PLANT && block.getType() != Material.GRASS_PATH && block.getType() != Material.LAVA && block.getType() != Material.STATIONARY_LAVA && block.getType() != Material.WATER && block.getType() != Material.STATIONARY_WATER && block.getType() != Material.STRUCTURE_VOID) {
+                            @SuppressWarnings("deprecation")
+                            PacketPlayOutWorldEvent packet = new PacketPlayOutWorldEvent(2001,
+                                    new BlockPosition(block.getLocation().getBlockX(), block.getLocation().getBlockY(), block.getLocation().getBlockZ()),
+                                    block.getType().getId(), false);
+                            List<Player> players = getPlayer().getWorld().getPlayers();
+                            for(final Player p : players) {
+                                ((CraftPlayer) p).getHandle().playerConnection.sendPacket(packet);
+                            }
+                            return new HitEntity(null, false, 0,
+                                    getPlayer().getEyeLocation(), new Location(getPlayer().getWorld(), px, py, pz));
+                        }
+                        if(block.getType() == Material.WATER || block.getType() == Material.STATIONARY_WATER) {
+                            currentDamage /= 2;
+                            currentHSDamage /= 2;
+                        }
+                        if(block.getType() == Material.LAVA || block.getType() == Material.STATIONARY_LAVA) {
+                            currentDamage /= 3;
+                            currentHSDamage /= 3;
+                        }
                     }
-                    return null;
                 }
                 x += separateX;
                 y += separateY;
@@ -412,6 +452,8 @@
                 currentDamage -= separateDamage;
                 currentHSDamage -= separateHSDamage;
             }
+            return new HitEntity(null, false, 0,
+                    getPlayer().getEyeLocation(), new Location(getPlayer().getWorld(), px, py, pz));
         }
         return null;
     }
@@ -436,7 +478,7 @@
         this.zoom = zoom;
         this.zoomLevel = zoomLevel;
         if(zoom && zoomLevel > 0) {
-            double d = 0.2 - (1.2 * zoomLevel / 100);
+            double d = 0.2 - (0.2 * zoomLevel / 100);
             player.setWalkSpeed((float) d);
         } else {
             player.setWalkSpeed(0.2F);
Index: GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/listeners/ItemListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/listeners/ItemListener.java b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/listeners/ItemListener.java
--- a/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/listeners/ItemListener.java	(revision 0aafa04bc793571c8432bc09cf5dfcbed2f48854)
+++ b/GunWarPlugin/src/main/java/xyz/n7mn/dev/gunwar/listeners/ItemListener.java	(revision 3acfbf1f47bc2c98edb105a023f3f60bacd1c768)
@@ -16,6 +16,9 @@
 import xyz.n7mn.dev.gunwar.game.data.PlayerData;
 import xyz.n7mn.dev.gunwar.item.GwGunItem;
 
+import java.util.HashMap;
+import java.util.UUID;
+
 public class ItemListener implements Listener {
 
     @EventHandler
@@ -48,7 +51,23 @@
         }
     }
 
-
+    @EventHandler
+    public void onInteractEntity(PlayerInteractEntityEvent e) {
+        PlayerData data = GunWar.getGame().getPlayerData(e.getPlayer());
+        if(data != null) {
+            ItemStack item = e.getPlayer().getInventory().getItemInMainHand();
+            if(item != null) {
+                ItemData itemData = GunWar.getGame().getItemData(e.getPlayer().getInventory().getItemInMainHand());
+                if (itemData != null) {
+                    if (itemData instanceof GunData) {
+                        GunData gunData = (GunData) itemData;
+                        if (gunData.getAmmo() <= 0) gunData.reload();
+                        gunData.fire();
+                    }
+                }
+            }
+        }
+    }
 
     @EventHandler
     public void onDropItem(PlayerDropItemEvent e) {
